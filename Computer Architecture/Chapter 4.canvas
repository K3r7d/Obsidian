{
	"nodes":[
		{"id":"960f8ae138dd9a03","type":"group","x":-2230,"y":1200,"width":3120,"height":2000,"label":"Pipeline Hazards"},
		{"id":"e71b85bcd7e104c8","type":"group","x":840,"y":-1582,"width":2480,"height":1742,"label":"Implementation pic"},
		{"id":"ee5795c15d2ee7d9","type":"group","x":-1440,"y":-407,"width":1540,"height":1140,"label":"MIPS instruction cycle"},
		{"id":"c321eca6be3d6240","type":"group","x":-3080,"y":-1276,"width":1260,"height":1116,"label":"Definition"},
		{"id":"d7e07fd3e7743e5e","type":"group","x":1160,"y":660,"width":1340,"height":680,"label":"Pipelining"},
		{"id":"fd526f8f0e7932b4","type":"group","x":-573,"y":-1696,"width":733,"height":976,"label":"Control"},
		{"id":"5129cff5c4d06ce1","type":"group","x":960,"y":-1440,"width":638,"height":928,"label":"R-Format Instruction"},
		{"id":"9e638b27843e0499","type":"group","x":-864,"y":-355,"width":394,"height":615,"label":"Instruction Fetch"},
		{"id":"e0aaf174c6519e2f","type":"group","x":180,"y":-2800,"width":420,"height":513,"label":"Introduction"},
		{"id":"d7ac564f508b9db7","type":"group","x":-400,"y":353,"width":420,"height":307,"label":"Execution"},
		{"id":"c76660b855250972","type":"group","x":-1400,"y":-276,"width":394,"height":296,"label":"Write Back"},
		{"id":"185d9ddef0657f53","type":"group","x":-1400,"y":407,"width":394,"height":196,"label":"Memory"},
		{"id":"4df647cce4e5f9a2","type":"group","x":180,"y":-2747,"width":400,"height":183,"label":"Instruction learn"},
		{"id":"a6d23049c8135e79","type":"group","x":-411,"y":-270,"width":431,"height":158,"label":"Instruction decode"},
		{"id":"814c771343789e0b","type":"text","text":"address is in the PC(program counter) register","x":-864,"y":-284,"width":347,"height":81},
		{"id":"d6e5d8c1f22ff1a0","type":"text","text":"Get instruction from memory","x":-864,"y":-355,"width":347,"height":71},
		{"id":"9c8d9bf66cf44cab","type":"text","text":"control transfer: beq, j","x":180,"y":-2624,"width":400,"height":60},
		{"id":"9b9b2de640a79b95","type":"text","text":"Arithmetic/logical: add, sub, and, or, slt","x":180,"y":-2684,"width":400,"height":60},
		{"id":"4765dd8fb76437ac","type":"text","text":"memory reference: lw, sw","x":180,"y":-2744,"width":400,"height":60},
		{"id":"2ed27845fb0bcbc9","type":"text","text":"Run the instruction","x":-395,"y":353,"width":415,"height":158},
		{"id":"25b7cf8a8c7b9593","type":"text","text":"ALUSrc:\n1 if Read data 2 does not have data such as addi or subi\n0 if Read data 2 have data","x":-552,"y":-1040,"width":697,"height":100},
		{"id":"23bf3cde1f33a5a2","type":"text","text":"RegWrite:\n","x":-552,"y":-940,"width":697,"height":100},
		{"id":"c3490abff8ff3740","type":"text","text":"MemWrite:\n1 if sw\n0 if not sw","x":-552,"y":-1128,"width":697,"height":88},
		{"id":"ebf4f785722ac335","type":"text","text":"ALUOp: \n\t1 if the instruction have arithmetic operation\n\t0 if the instruction not have arithmetic operation","x":-552,"y":-1240,"width":697,"height":112},
		{"id":"91486e67d4028b18","type":"text","text":"MemtoReg:\n\t1 if the instruction get the Read Data from data memory\n\t0 if the instruction not get the Read Data from data memory","x":-553,"y":-1339,"width":698,"height":99},
		{"id":"27eed3c3aaa00a86","type":"text","text":"Branch:\n\t1  if the Instruction is branch\n\t0 if instruction don't go to any branch.   ","x":-552,"y":-1593,"width":697,"height":135},
		{"id":"7c198404be0fe133","type":"text","text":"MemRead: \n\t1 if the instruction is read memory\n\t0 if the instruction is not read memory","x":-552,"y":-1458,"width":697,"height":113},
		{"id":"d0fd4c1b20e43066","type":"text","text":"RegDst:\n\t0 not return answer\n\t1 if return answer","x":-552,"y":-1679,"width":697,"height":87},
		{"id":"0c1055872b51d3c5","type":"text","text":"Single clock and Pipeline","x":180,"y":-2507,"width":250,"height":50},
		{"id":"da6e79131f9bed6b","type":"text","text":"Then signal will go to add to increase the value of PC by 4 for the next instruction","x":-864,"y":146,"width":394,"height":79},
		{"id":"bce76f1a5e269656","type":"text","text":"When the PC go in the instruction memory, 32 bits of instruction will be taken out.","x":-864,"y":86,"width":394,"height":60},
		{"id":"5657e6395b66f4cf","type":"text","text":"when instructions are written in .text, all will be encode to computer code and store in the instruction memory","x":-864,"y":-12,"width":394,"height":100},
		{"id":"687320f36d58bc6d","type":"file","file":"Ảnh màn hình 2023-12-01 lúc 13.19.09.png","x":-864,"y":-203,"width":394,"height":191},
		{"id":"1496ce0571a90f47","type":"text","text":"Store the result of operation","x":-1400,"y":-276,"width":394,"height":52},
		{"id":"1be5425affd706cb","type":"text","text":"Decode address just access by IF","x":-409,"y":-268,"width":431,"height":50},
		{"id":"c1eee09c9e5b9007","type":"text","text":"Access Memory","x":-1376,"y":407,"width":347,"height":50},
		{"id":"453ff129baefaf27","type":"text","text":"Write Control Signal: We will use the word asserted to indicate a signal that is logically high and assert\n\nto specify that a signal should be driven logically high, and deassert or deasserted\n\nto represent logically low. We use the terms assert and deassert because when\n\nwe implement hardware, at times 1 represents logically high and at times it can\n\nrepresent logically low.","x":-3063,"y":-1010,"width":732,"height":283},
		{"id":"4a44b77b068340f9","type":"text","text":"register file: A state element that consists of a set of registers that can be read and written by supplying a register number to be accessed.","x":-3063,"y":-1224,"width":457,"height":111},
		{"id":"e6a5f95bd9622000","type":"text","text":"ALU là bộ tính toán đại số","x":-2420,"y":-1224,"width":250,"height":60},
		{"id":"c556a53ab4cc650d","type":"text","text":"Structure Hazard Solution\n\tSeparate the Date Memory and Instruction Memory.\n\tDivide a Full Cycle into a 2 cycles and let the Write memory and Read memory action do sequentially.","x":-508,"y":2066,"width":1259,"height":985},
		{"id":"80389956a6cca787","type":"text","text":"Structure Hazard Cause: Read and Write the data or memory at the same time, cause memory conflict. Assume that Instruction memory and Data Memory use the same physical memory. \n![[Ảnh màn hình 2023-12-01 lúc 18.17.57.png]]","x":-2161,"y":2066,"width":1379,"height":985},
		{"id":"bde0a6f443ea6112","type":"text","text":"Data Hazard Cause:  Decode the old value of the register when the before instruction have not updated yet.\n\n![[Ảnh màn hình 2023-12-01 lúc 18.14.38.png]]","x":-2161,"y":1266,"width":1379,"height":666},
		{"id":"579d0dbe7314fa11","type":"text","text":"Data Hazard Solution:\n\t 1. Bubble, Stall, Delay:\n\t\t Add some NOP Instructions between two instructions get Data Hazard to make sure that the Decoding stage get the right value of the register\n\t\t Example: To make sure that the ID get the right $s0, they add 2 more instructions and when the WB update the value of $s0 at the first semi-cycle, the ID get the value of $s0 at the entire semi-cycle.\n\t\t ![[Pasted image 20231201215359.png]] \n\t2. Forwarding (Bypassing):\n\t\tUse the result when it's calculated\n\t\tRequire extra connections in the data path\n\t\t![[Pasted image 20231201215945.png]]\n\t\t","x":-508,"y":1266,"width":1259,"height":728},
		{"id":"f1234d06585f3352","type":"file","file":"Ảnh màn hình 2023-12-01 lúc 13.38.55.png","x":969,"y":-919,"width":621,"height":327},
		{"id":"60c8f08ab2cfe51c","type":"text","text":"lw","x":2635,"y":-696,"width":250,"height":60},
		{"id":"e18cb34e291537f5","type":"text","text":"Data path: là đường dẫn dữ liệu là được điều khiển bởi Control","x":-2120,"y":-1113,"width":250,"height":103},
		{"id":"7ff2960dd5b208e2","type":"text","text":"beq","x":1190,"y":-89,"width":250,"height":60},
		{"id":"992f05a4c980a805","type":"text","text":"sw","x":1922,"y":-119,"width":250,"height":60},
		{"id":"8616cfa26211a653","type":"file","file":"Pasted image 20231201220242.png","x":1520,"y":660,"width":500,"height":255},
		{"id":"ff469eebd67f5250","type":"text","text":"Pipelining is an implementation technique in which multiple instructions are","x":1160,"y":660,"width":360,"height":100},
		{"id":"82a72640922c440c","type":"text","text":"Hazards \n\tData Hazard\n\tStructure Hazard","x":1160,"y":760,"width":360,"height":113},
		{"id":"f875f39532b4a6f8","type":"text","text":"","x":2018,"y":663,"width":250,"height":60},
		{"id":"10e195cdbe5a743d","type":"text","text":"Some instructions don't have the register, RegWrite = 0","x":960,"y":-592,"width":638,"height":60},
		{"id":"7a895a2ca3826821","type":"file","file":"Ảnh màn hình 2023-12-01 lúc 14.28.49.png","x":1709,"y":-1074,"width":681,"height":378},
		{"id":"2fea4d8d7abad5e9","type":"file","file":"Ảnh màn hình 2023-12-01 lúc 15.40.02.png","x":2635,"y":-1010,"width":400,"height":314},
		{"id":"577983c694117d0d","type":"text","text":"The Register will return the value of R1 and R2, which is passed, to the Read data 1 and Read data 2.","x":960,"y":-1030,"width":638,"height":60},
		{"id":"96d1f03b6da0a6f7","type":"text","text":"The data will go to the ALU to compute and return the result ito the Write Data","x":960,"y":-969,"width":638,"height":50},
		{"id":"9c10733964824f0d","type":"file","file":"Ảnh màn hình 2023-12-01 lúc 13.30.49.png","x":960,"y":-1432,"width":638,"height":310},
		{"id":"27e3cac70853b5d2","type":"file","file":"Ảnh màn hình 2023-12-01 lúc 15.42.54.png","x":1190,"y":-403,"width":400,"height":314},
		{"id":"e69b81f4b7b1f00f","type":"file","file":"Ảnh màn hình 2023-12-01 lúc 15.42.12.png","x":1922,"y":-433,"width":400,"height":314},
		{"id":"3943c7f046794f71","type":"text","text":"Arithmetic","x":2635,"y":-218,"width":250,"height":60},
		{"id":"decd2913993148a2","type":"text","text":"When executing the R-Format Instruction, the program will pass the value of the register call in the instruction into the Read Register.","x":960,"y":-1122,"width":638,"height":95},
		{"id":"454afacec9898ccb","type":"file","file":"Ảnh màn hình 2023-11-30 lúc 17.58.46.png","x":2540,"y":-1538,"width":494,"height":360},
		{"id":"e92cb0bae5499f77","type":"text","text":"CPU","x":1800,"y":-1268,"width":199,"height":50},
		{"id":"904b811ba6b33d29","type":"file","file":"Ảnh màn hình 2023-12-01 lúc 14.02.47.png","x":1800,"y":-1538,"width":500,"height":270},
		{"id":"f55a6370362be94a","type":"link","url":"https://www.cit.ctu.edu.vn/~dtnghi/cod/ch5.pdf","x":960,"y":-2830,"width":400,"height":292},
		{"id":"bd9fd691e222a6a0","type":"file","file":"Ảnh màn hình 2023-12-01 lúc 15.41.07.png","x":2635,"y":-532,"width":400,"height":314}
	],
	"edges":[
		{"id":"68af00e5d5956b4b","fromNode":"9e638b27843e0499","fromSide":"right","toNode":"a6d23049c8135e79","toSide":"left"},
		{"id":"a5bae33205e30a0e","fromNode":"a6d23049c8135e79","fromSide":"bottom","toNode":"d7ac564f508b9db7","toSide":"top"},
		{"id":"fab2761aa7678b29","fromNode":"d7ac564f508b9db7","fromSide":"left","toNode":"185d9ddef0657f53","toSide":"right"},
		{"id":"6b2725b3371154e9","fromNode":"c76660b855250972","fromSide":"right","toNode":"9e638b27843e0499","toSide":"left"},
		{"id":"bf3dbf781ebdca42","fromNode":"185d9ddef0657f53","fromSide":"top","toNode":"c76660b855250972","toSide":"bottom"},
		{"id":"ddc8da1ebe4697d0","fromNode":"60c8f08ab2cfe51c","fromSide":"top","toNode":"2fea4d8d7abad5e9","toSide":"bottom"},
		{"id":"0c1bd5c032fe5438","fromNode":"d7e07fd3e7743e5e","fromSide":"left","toNode":"960f8ae138dd9a03","toSide":"right"}
	]
}